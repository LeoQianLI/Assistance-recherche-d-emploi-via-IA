import tempfile
import streamlit as st
import os
import time
import codecs
from crewai_tools import FileReadTool, MDXSearchTool, SerperDevTool, ScrapeWebsiteTool
from crewai import Agent, Crew, Process, Task, LLM
from crewai.project import CrewBase, agent, crew, task
from models_st import JobRequirements, ResumeOptimization, CompanyResearch
from litellm.exceptions import RateLimitError

# Cr√©er une classe personnalis√©e pour lire les fichiers avec un encodage sp√©cifique
class CustomFileReadTool(FileReadTool):
    def _read_file(self, file_path):
        """Lit le fichier avec l'encodage UTF-8."""
        try:
            with codecs.open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except Exception as e:
            return f"Error: Failed to read file {file_path}. {str(e)}"

def get_llm(role_name):
    """Fonction pour obtenir un LLM avec repli en cas d'erreur"""
    # Liste des mod√®les √† essayer dans l'ordre
    models_to_try = [
        "gemini/gemini-2.0-flash-exp",
        "gpt-3.5-turbo",
        "claude-2",
        "mistral/mistral-7b-instruct"
    ]
    
    # Essayer chaque mod√®le jusqu'√† ce qu'un fonctionne
    for model in models_to_try:
        try:
            # st.info(f"Tentative d'utilisation du mod√®le {model} pour {role_name}...")
            return LLM(model=model)
        except Exception as e:
            st.warning(f"√âchec avec le mod√®le {model}: {str(e)}")
            continue
    
    # Si aucun mod√®le ne fonctionne, lever une exception
    raise Exception("Aucun mod√®le LLM disponible n'a pu √™tre initialis√©.")

# create a liens related to the resume_text in the file crewai_st.py

if "resume_text" in st.session_state and st.session_state.resume_text:
    resume_text = st.session_state['selected_job']
    resume_t = st.session_state.resume_text
    # Cr√©er un fichier temporaire pour le contenu du CV
    with tempfile.NamedTemporaryFile(
        delete=False, suffix=".txt", mode="w", encoding="utf-8"
    ) as temp_file:
        temp_file.write(resume_t)
        temp_file_path = temp_file.name
    
    # V√©rifier que le fichier temporaire existe et est accessible
    if not os.path.exists(temp_file_path):
        st.error(f"Le fichier temporaire {temp_file_path} n'existe pas.")
    else:
        # st.info(f"Fichier temporaire cr√©√© avec succ√®s: {temp_file_path}")
        # Essayer de lire le fichier pour v√©rifier qu'il est accessible
        try:
            with open(temp_file_path, "r", encoding="utf-8") as f:
                _ = f.read()
            # st.success("Lecture du fichier temporaire r√©ussie.")
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier temporaire: {str(e)}")

    # Initialiser les outils avec le fichier temporaire et utiliser notre classe personnalis√©e
    read_resume = CustomFileReadTool(file_path=temp_file_path)
    sematic_search_resume = MDXSearchTool(mdx=temp_file_path)

    @CrewBase
    class Gojob:
        """Gojob crew"""

        @agent
        def resume_analyzer(self) -> Agent:
            return Agent(
                verbose=True,
                groq_llm=get_llm("resume_analyzer"),
                tools=[read_resume, sematic_search_resume],
                role="Expert en optimisation de CV",
                goal="Analyser les CV et fournir des suggestions d'optimisation structur√©es en fran√ßais",
                backstory="""Vous √™tes un sp√©cialiste de l'optimisation de CV avec une connaissance approfondie des syst√®mes ATS
et des meilleures pratiques modernes en mati√®re de CV. Vous excellez dans l'analyse des CV PDF et
la fourniture de suggestions d'am√©lioration concr√®tes. Vos recommandations se concentrent toujours
sur la lisibilit√© humaine et la compatibilit√© ATS.üü¢ **TOUTES VOS R√âPONSES DOIVENT √äTRE EN FRAN√áAIS.**""",
            )

        @agent
        def job_analyzer(self) -> Agent:
            return Agent(
                verbose=True,
                tools=[ScrapeWebsiteTool(),read_resume, sematic_search_resume],
                groq_llm=get_llm("job_analyzer"),
                role="Analyste des exigences de poste",
                goal="Analyser les descriptions de poste et √©valuer l'ad√©quation des candidats en fran√ßais",
                backstory="""Vous √™tes un expert en analyse du march√© du travail et en √©valuation des candidats. Votre force
r√©side dans la d√©composition des exigences de poste en cat√©gories claires et la fourniture
d'une √©valuation d√©taill√©e bas√©e sur les qualifications des candidats. Vous comprenez √† la fois les
comp√©tences techniques et g√©n√©rales, et pouvez √©valuer avec pr√©cision les niveaux d'exp√©rience.üü¢ **TOUTES VOS R√âPONSES DOIVENT √äTRE EN FRAN√áAIS.**""",
            )

        @agent
        def company_researcher(self) -> Agent:
            return Agent(
                verbose=True,
                tools=[SerperDevTool(), read_resume, sematic_search_resume],
                groq_llm=get_llm("company_researcher"),
                role="Sp√©cialiste en intelligence d'entreprise",
                goal="Rechercher des informations sur les entreprises et pr√©parer des insights pour les entretiens en fran√ßais",
                backstory="""Vous √™tes un expert en recherche d'entreprise qui excelle dans la collecte et l'analyse
des derni√®res informations sur les entreprises. Vous savez comment trouver et synth√©tiser des donn√©es
provenant de diverses sources pour cr√©er des profils d'entreprise complets et pr√©parer
les candidats aux entretiens.üü¢ **TOUTES VOS R√âPONSES DOIVENT √äTRE EN FRAN√áAIS.**""",
            )

        @agent
        def resume_writer(self) -> Agent:
            return Agent(
                verbose=True,
                llm=get_llm("resume_writer"),
                tools=[SerperDevTool(), read_resume, sematic_search_resume],
                role="Sp√©cialiste en r√©daction de CV en markdown",
                goal="Cr√©er des CV format√©s en markdown, optimis√©s pour les ATS en fran√ßais",
                backstory="""Vous √™tes un expert en r√©daction de CV sp√©cialis√© dans la cr√©ation de CV format√©s en markdown.
                Vous savez comment transformer des suggestions d'optimisation structur√©es en documents
                format√©s en markdown, optimis√©s pour les ATS, qui maintiennent le professionnalisme
                tout en mettant en valeur les points forts des candidats.üü¢ **TOUTES VOS R√âPONSES DOIVENT √äTRE EN FRAN√áAIS.**""",
            )

        @agent
        def report_generator(self) -> Agent:
            return Agent(
                verbose=True,
                llm=get_llm("report_generator"),
                tools=[SerperDevTool(), read_resume, sematic_search_resume],
                role="G√©n√©rateur de rapports de carri√®re et sp√©cialiste du markdown",
                goal="Cr√©er des rapports complets, visuellement attrayants et exploitables √† partir de l'analyse des candidatures en fran√ßais",
                backstory="""Vous √™tes un expert en visualisation de donn√©es, r√©daction technique et formatage markdown.
                Vous excellez dans la combinaison de donn√©es provenant de multiples sources JSON pour cr√©er des rapports
                coh√©rents et visuellement attrayants. Votre sp√©cialit√© est de transformer des analyses structur√©es
                en insights clairs et exploitables avec un formatage markdown appropri√©, des emojis et
                des √©l√©ments visuels qui rendent l'information √† la fois attrayante et facilement digestible.üü¢ **TOUTES VOS R√âPONSES DOIVENT √äTRE EN FRAN√áAIS.**""",
            )

        @task
        def analyze_job_task(self) -> Task:
            return Task(
                agent=self.job_analyzer(),
                output_file="output/job_analysis.json",
                output_pydantic=JobRequirements,
                description="""Analyser la description du poste et √©valuer l'ad√©quation du candidat en fonction de son CV.
                                Sortie en JSON structur√©.
                                Ajouter des emojis et des √©l√©ments visuels pour am√©liorer la lisibilit√©.
                                Si la longueur de la phrase atteint 94 caract√®res, veuillez passer la ligne suivante.
                                1. Extraire les exigences : comp√©tences techniques, g√©n√©rales, exp√©rience, √©ducation, connaissance du secteur.
                                2. √âvaluer les comp√©tences techniques et g√©n√©rales.
                                3. √âvaluer l'exp√©rience et l'√©ducation.
                                4. Calculer le score global.""",
                expected_output="Donn√©es JSON structur√©es contenant l'analyse du poste et les d√©tails de l'√©valuation.",
            )

        @task
        def optimize_resume_task(self) -> Task:
            return Task(
                agent=self.resume_analyzer(),
                output_file="output/resume_optimization.json",
                output_pydantic=ResumeOptimization,
                description="""Examiner le {read_resume} uploaded en fonction de l'analyse du poste et cr√©er des suggestions d'optimisation structur√©es.
                                Sortie en JSON structur√©.
                                Ajouter des emojis et des √©l√©ments visuels pour am√©liorer la lisibilit√©.
                                Si la longueur de la phrase atteint 94 caract√®res, veuillez passer la ligne suivante.
                                1. Analyser le contenu et la structure du CV.
                                2. G√©n√©rer des suggestions d'am√©lioration.
                                3. LE CV DOIT √äTRE G√âN√âR√â EN FRAN√áAIS SEULEMENT.""",
                expected_output="Donn√©es JSON structur√©es contenant des suggestions d'optimisation d√©taill√©es.",
                context= [self.analyze_job_task()]
            )

        @task
        def research_company_task(self) -> Task:
            return Task(
                agent=self.company_researcher(),
                output_file="output/company_research.json",
                output_pydantic=CompanyResearch,
                description="""Rechercher des informations sur l'entreprise et pr√©parer une analyse compl√®te.
                            Sortie en JSON structur√©.
                            Ajouter des emojis et des √©l√©ments visuels pour am√©liorer la lisibilit√©.
                            Si la longueur de la phrase atteint 94 caract√®res, veuillez passer la ligne suivante.
                            1. Pr√©sentation de l'entreprise : d√©veloppements r√©cents, culture, position sur le march√©.
                            2. Pr√©paration √† l'entretien : questions courantes, sujets sp√©cifiques, projets r√©cents.""",
                expected_output="Donn√©es JSON structur√©es contenant les r√©sultats de la recherche sur l'entreprise.",
            )

        @task
        def generate_resume_task(self) -> Task:
            return Task(
                agent=self.resume_writer(),
                output_file="output/optimized_resume.md",
                description=f"""Utiliser le contenu du CV original et les suggestions d'optimisation pour cr√©er un CV optimis√© en markdown.
                                Contenu du CV original:
                                {resume_t}
                                
                                Instructions:
                                1. Int√©grer le contenu original du CV
                                2. Appliquer les suggestions d'optimisation
                                3. Formater en markdown
                                4. Ajouter des emojis et des √©l√©ments visuels
                                5. LE CV DOIT √äTRE G√âN√âR√â EN FRAN√áAIS SEULEMENT
                                6. Ne pas ajouter de blocs de code markdown comme '```'
                                7. Si la longueur de la phrase atteint 94 caract√®res, passer √† la ligne suivante""",
                expected_output="Un document de CV au format markdown bien pr√©sent√©, incorporant le contenu original et les suggestions d'optimisation.",
                context= [self.optimize_resume_task(), self.analyze_job_task(), self.research_company_task()]
            )

        @task
        def generate_report_task(self) -> Task:
            return Task(
                agent=self.report_generator(),
                output_file="output/final_report.md",
                description="""Cr√©er un rapport de synth√®se ex√©cutif en utilisant les donn√©es des √©tapes pr√©c√©dentes.
                            Formater en markdown sans blocs de code '```'.
                            Ajouter des emojis et des √©l√©ments visuels pour am√©liorer la lisibilit√©.
                            Si la longueur de la phrase atteint 94 caract√®res, veuillez passer la ligne suivante.
                            1. Int√©grer les donn√©es : analyse du poste, optimisation du CV, insights sur l'entreprise.
                            2. Structurer le rapport : r√©sum√© ex√©cutif, analyse de l'ad√©quation, aper√ßu de l'optimisation, insights sur l'entreprise, prochaines √©tapes.
                            3. LE final_report DOIT √äTRE G√âN√âR√â EN FRAN√áAIS SEULEMENT.""",
                expected_output=""" Un rapport markdown complet combinant toutes les analyses en un document clair et exploitable.""",
                context= [self.analyze_job_task(), self.optimize_resume_task(), self.research_company_task()]
            )

        @crew
        def crew(self) -> Crew:
            agents_instances = [
                self.resume_analyzer(),
                self.job_analyzer(),
                self.company_researcher(),
                self.resume_writer(),
                self.report_generator(),
            ]
            tasks_instances = [
                self.analyze_job_task(),
                self.optimize_resume_task(),
                self.research_company_task(),
                self.generate_resume_task(),
                self.generate_report_task(),
            ]
            return Crew(
                agents=agents_instances,
                tasks=tasks_instances,
                verbose=True,
                process=Process.sequential,
                tools=[read_resume, sematic_search_resume],
            )

    # Fonction pour tenter d'ex√©cuter avec plusieurs tentatives
    def retry_with_backoff(func, max_retries=3, initial_delay=5):
        """Ex√©cuter une fonction avec backoff exponentiel en cas d'erreur"""
        delay = initial_delay
        for attempt in range(max_retries):
            try:
                return func()
            except RateLimitError as e:
                if attempt == max_retries - 1:
                    raise e
                st.warning(f"Limite de requ√™tes atteinte. Nouvelle tentative dans {delay} secondes... (Tentative {attempt+1}/{max_retries})")
                time.sleep(delay)
            except UnicodeDecodeError as e:
                st.error(f"Erreur d'encodage: {str(e)}")
                st.info("Tentative de r√©cup√©ration avec un encodage diff√©rent...")
                if attempt == max_retries - 1:
                    raise e
                time.sleep(delay)
            except Exception as e:
                st.error(f"Erreur inattendue: {str(e)}")
                if attempt == max_retries - 1:
                    raise e
                time.sleep(delay)
                delay *= 2  # Backoff exponentiel
                
    try:
        if not os.path.exists("output"):
            os.makedirs("output")
        
        output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "output")
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        gojob = Gojob()
        crew_instance = gojob.crew()
        
        def execute_crew():
            return crew_instance.kickoff()
        
        result = retry_with_backoff(execute_crew, max_retries=3, initial_delay=5)

        output_base_dir = os.getcwd()
        
        possible_paths = [
            os.path.join(output_dir, "final_report.md"),
            os.path.join(output_base_dir, "output", "final_report.md"),
            "output/final_report.md",
        ]
        
        possible_resume_paths = [
            os.path.join(output_dir, "optimized_resume.md"),
            os.path.join(output_base_dir, "output", "optimized_resume.md"),
            "output/optimized_resume.md",
        ]
        
        report_file = next((path for path in possible_paths if os.path.exists(path)), None)
        optimized_resume_file = next((path for path in possible_resume_paths if os.path.exists(path)), None)
        
        # Ajouter du CSS pour am√©liorer la lisibilit√© et √©viter le d√©filement horizontal
        st.markdown("""
        <style>
        .report-container {
            max-width: 100%;
            overflow-x: hidden;
            word-wrap: break-word;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .report-container img {
            max-width: 100%;
            height: auto;
        }
        .report-container h1, .report-container h2 {
            color: #0066cc;
        }
        .report-container p, .report-container li {
            font-size: 16px;
            line-height: 1.6;
        }
        </style>
        """, unsafe_allow_html=True)
        
        if report_file and os.path.exists(report_file):
            try:
                with open(report_file, "r", encoding="utf-8") as file:
                    final_report = file.read()
                st.subheader("Rapport d'Analyse")
                st.markdown(f'<div class="report-container">{final_report}</div>', unsafe_allow_html=True)
                st.success("Rapport g√©n√©r√© avec succ√®s!")
            except Exception as e:
                st.error(f"Erreur lors de la lecture du rapport: {str(e)}")
                
        if optimized_resume_file and os.path.exists(optimized_resume_file):
            try:
                with open(optimized_resume_file, "r", encoding="utf-8") as file:
                    optimized_resume = file.read()
                st.subheader("CV Optimis√©")
                st.markdown(f'<div class="report-container">{optimized_resume}</div>', unsafe_allow_html=True)
                st.success("CV optimis√© g√©n√©r√© avec succ√®s!")
            except Exception as e:
                st.error(f"Erreur lors de la lecture du CV optimis√©: {str(e)}")
            
        if not report_file and not optimized_resume_file:
            st.error("Les fichiers de rapport n'ont pas √©t√© trouv√©s.")
                
    except RateLimitError as e:
        st.error("Nous avons atteint la limite de requ√™tes pour le moment. Le syst√®me va essayer d'utiliser un autre mod√®le d'IA.")
        st.error(f"Erreur d√©taill√©e: {str(e)}")
        
        try:
            st.info("Tentative d'utilisation d'un mod√®le alternatif...")
            os.environ["LLM_MODEL"] = "gpt-3.5-turbo"
            gojob = Gojob()
            crew_instance = gojob.crew()
            result = crew_instance.kickoff()
            st.success("Op√©ration r√©ussie avec le mod√®le alternatif!")
        except Exception as fallback_error:
            st.error("√âchec de l'utilisation du mod√®le alternatif. Veuillez r√©essayer plus tard.")
            st.error(f"Erreur d√©taill√©e: {str(fallback_error)}")
            
    except Exception as e:
        st.error("Une erreur inattendue s'est produite. Veuillez r√©essayer.")
        st.error(f"Erreur d√©taill√©e: {str(e)}")

